plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id("org.jetbrains.kotlin.plugin.serialization") version "1.8.0"
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

version = project.mod_version
group = project.maven_group
var ktor_version = "2.2.2"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://maven.fabricmc.net/" }
}


configurations {
    api.extendsFrom includeApi
    shadowInclude
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:1.9.0+kotlin.1.8.0"
    implementation("net.fabricmc:mapping-io:0.1.8")


    shadowInclude implementation('io.ktor:ktor-server-auth-jvm:2.2.2')
    shadowInclude implementation('io.ktor:ktor-server-core-jvm:2.2.2')
    shadowInclude implementation('io.ktor:ktor-server-websockets-jvm:2.2.2')
    shadowInclude implementation("io.ktor:ktor-server-websockets:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-server-core:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-server-cio:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-server-content-negotiation:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-server-auth-jvm:$ktor_version")

    shadowInclude implementation('io.ktor:ktor-client-plugins-jvm:2.2.2')
    shadowInclude implementation("io.ktor:ktor-client:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-client-cio:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-client-cio-jvm:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-client-websockets:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-client-auth:$ktor_version")
    shadowInclude implementation("io.ktor:ktor-client-auth-jvm:$ktor_version")
    shadowInclude implementation('net.bytebuddy:byte-buddy-agent:1.14.0')
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    archiveClassifier = "all-dev"
    configurations = [project.configurations.shadowInclude]
    minimize()
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    exclude "/kotlin*"
    relocate "net.bytebuddy", "icu.takeneko.omms.deps.bytebuddy"
}

task("remapShadowJar", type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
    input = shadowJar.archiveFile
    archiveFileName = shadowJar.archiveFileName.get().replaceAll("-dev\\.jar\$", ".jar")
    addNestedDependencies = true
}


def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

compileKotlin.kotlinOptions.jvmTarget = "17"
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}